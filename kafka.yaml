namespace: kafka-cluster

zookeeper-base:
  defines: runnable
  version: latest
  services:
    zookeeper-2181:
      container: zookeeper
      port: 2181
      protocol: tcp
      host-port: 2181
    zookeeper-2888:
      container: zookeeper
      port: 2888
      protocol: tcp
      host-port: 2888   
    zookeeper-3888:
      container: zookeeper
      port: 3888
      protocol: tcp
      host-port: 3888
  connections:
    zookeeper1-2181:
      runnable: kafka-cluster/zookeeper-1
      service: zookeeper-2181
    zookeeper1-2888:
      runnable: kafka-cluster/zookeeper-1
      service: zookeeper-2888
    zookeeper1-3888:
      runnable: kafka-cluster/zookeeper-1
      service: zookeeper-3888  
    zookeeper2-2181:
      runnable: kafka-cluster/zookeeper-2
      service: zookeeper-2181
    zookeeper2-2888:
      runnable: kafka-cluster/zookeeper-2
      service: zookeeper-2888
    zookeeper2-3888:
      runnable: kafka-cluster/zookeeper-2
      service: zookeeper-3888
    zookeeper3-2181:
      runnable: kafka-cluster/zookeeper-3
      service: zookeeper-2181
    zookeeper3-2888:
      runnable: kafka-cluster/zookeeper-3
      service: zookeeper-2888
    zookeeper3-3888:
      runnable: kafka-cluster/zookeeper-3
      service: zookeeper-3888                                            
  readiness:
      code: |
          exec("zookeeper", "/usr/bin/bash", "-c", "echo 'ruok' | nc -w 2 localhost 2181 | grep imok") "imok" contains?
      period: 10
      initialDelay: 5  
  metadata:
    defines: metadata
    name: Apache Zookeper
    description: Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.
    tags: configuration, services
    website: https://zookeeper.apache.org/
    source: https://github.com/apache/zookeeper
    publisher: monk.io
    icon: https://assets.monk.io/icons/zookeper.gif
  containers:
    defines: containers
    zookeeper:
      image: confluentinc/cp-zookeeper
      image-tag: <- `${zookeeper-image}`
      ports:
        - <- `0.0.0.0:${zookeeper-port}:2181`
        - 2888
        - 3888
      environment:
        - <- `ZOOKEEPER_CLIENT_PORT=${zookeeper-port}`
        - KAFKA_OPTS=-Dzookeeper.4lw.commands.whitelist=* -Dzookeeper.electionPortBindRetry=0
      paths: 
        - <- `${volume_local}:${volume_container}`
  variables:
    zookeeper-port:
      type: int
      value: 2181
    volume_container:
      type: string
      value: "/opt/zookeeper-3.4.13/data"
    zookeeper-image:
      value: <- $zookeeper-image-tag
      type: string


zookeeper-1:
  defines: runnable
  inherits: kafka-cluster/zookeeper-base
  variables:
    volume_local:
      type: string
      value: <- `${moncc-volume-path}/zookeeper1`
    zookeeper-servers:
      env: ZOOKEEPER_SERVERS
      type: string
      value: <- "0.0.0.0" ":2888:3888;" get-hostname("kafka-cluster/zookeeper-2", "zookeeper") ":2888:3888;" get-hostname("kafka-cluster/zookeeper-3", "zookeeper") ":2888:3888" concat-all
    # zookeeper-servers:
    #   env: ZOOKEEPER_SERVERS
    #   type: string
    #   value: server.1=13.51.204.15:2888:3888;2181 server.2=13.53.42.43:2888:3888;2181 server.3=13.48.149.182:2888:3888;2181
    zookeeper-id:
      env: ZOOKEEPER_SERVER_ID
      type: string
      value: 1

zookeeper-2:
  defines: runnable
  inherits: kafka-cluster/zookeeper-base
  variables:
    volume_local:
      type: string
      value: <- `${moncc-volume-path}/zookeeper2`
    # zookeeper-servers:
    #   env: ZOOKEEPER_SERVERS
    #   type: string
    #   value: <- connection-hostname("zookeeper1-2181") ":2888:3888;" "0.0.0.0" ":2888:3888;" connection-hostname("zookeeper3-2181") ":2888:3888" concat-all
    zookeeper-servers: 
      env: ZOOKEEPER_SERVERS
      type: string
      value: <- get-hostname("kafka-cluster/zookeeper-1", "zookeeper") ":2888:3888;" "0.0.0.0" ":2888:3888;" get-hostname("kafka-cluster/zookeeper-3", "zookeeper") ":2888:3888" concat-all  
    zookeeper-id:
      env: ZOOKEEPER_SERVER_ID
      type: string
      value: 2

zookeeper-3:
  defines: runnable
  inherits: kafka-cluster/zookeeper-base
  variables:
    volume_local:
      type: string
      value: <- `${moncc-volume-path}/zookeeper3`
    # zookeeper-servers:
    #   env: ZOOKEEPER_SERVERS
    #   type: string
    #   value: <- connection-hostname("zookeeper1-2181") ":2888:3888;" connection-hostname("zookeeper2-2181") ":2888:3888;" "0.0.0.0" ":2888:3888" concat-all
    zookeeper-servers: 
      env: ZOOKEEPER_SERVERS
      type: string
      value: <- get-hostname("kafka-cluster/zookeeper-1", "zookeeper") ":2888:3888;" get-hostname("kafka-cluster/zookeeper-2", "zookeeper") ":2888:3888;" "0.0.0.0" ":2888:3888" concat-all      
    zookeeper-id:
      env: ZOOKEEPER_SERVER_ID
      type: string
      value: 3





kafka-base:
  defines: runnable
  version: latest
  metadata:
    defines: metadata
    name: Apache Kafka
    description: Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.
    tags: streaming,data,analytics,integration,distributed
    website: https://kafka.apache.org/
    source: https://github.com/apache/kafka
    publisher: monk.io
    icon: https://assets.monk.io/icons/kafka.png
  services:
    kafka-broker:
      container: kafka
      port:  <- `${broker-port}` to-i
      protocol: tcp
      host-port:  <- `${broker-port}` to-i
    kafka-internal-broker:
      container: kafka
      port:  <- `${broker-internal-port}` to-i
      protocol: tcp
  connections:
    zookeeper1-2181:
      runnable: kafka-cluster/zookeeper-1
      service: zookeeper-2181
    zookeeper2-2181:
      runnable: kafka-cluster/zookeeper-2
      service: zookeeper-2181
    zookeeper3-2181:
      runnable: kafka-cluster/zookeeper-3
      service: zookeeper-2181
    kafka-1:
      runnable: kafka-cluster/kafka-1
      service: kafka-internal-broker  
    kafka-2:
      runnable: kafka-cluster/kafka-2
      service: kafka-internal-broker       
    kafka-3:
      runnable: kafka-cluster/kafka-3
      service: kafka-internal-broker      
  containers:
    defines: containers
    kafka:
      image: confluentinc/cp-kafka
      image-tag: <- `${kafka-image}`
      ports:
        - <- `0.0.0.0:${broker-port}:${broker-port}`
        - <- `0.0.0.0:${broker-internal-port}:${broker-internal-port}`
      environment:
        - <- `KAFKA_ADVERTISED_LISTENERS=INTERNAL://${broker-internal-host-name}:${broker-internal-port},PLAINTEXT_HOST://localhost:${broker-port}`
        - <- `KAFKA_ZOOKEEPER_CONNECT=${zookeeper-connects}`
        - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
        - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
        - KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE=false
        - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
        - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
        - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
        - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=1000
        - KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR=1
        - KAFKA_LOG4J_LOGGERS="kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        - KAFKA_AUTHORIZER_CLASS_NAME=kafka.security.authorizer.AclAuthorizer
        - KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND=true
        - <- `CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS=${broker-internal-host-name}:${broker-internal-port}`
        - <- `CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT=${zookeeper-connects}`
        - CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS=1
        - CONFLUENT_METRICS_ENABLE=false
        - CONFLUENT_SUPPORT_CUSTOMER_ID=anonymous
  depends:
    wait-for:
      runnables:
        - kafka-cluster/zookeeper-1
        - kafka-cluster/zookeeper-2
        - kafka-cluster/zookeeper-3
      timeout: 30        
  variables:
    broker-id:
      type: int
      value: 2
    broker-port:
      type: int
      value: 9092
    broker-internal-host-name:
      env: KAFKA_SERVICE_HOSTNAME
      type: string
      value: <- connection-hostname("kafka-1")
    broker-internal-port:
      type: int
      value: 29092
    zookeeper-connects:
      env: KAFKA_ZOOKEEPER_CONNECT
      type: string
      value: <- connection-hostname("zookeeper1-2181") ":2181," connection-hostname("zookeeper2-2181")  ":2181," connection-hostname("zookeeper3-2181")  ":2181" concat-all
    zookeeper-port:
      type: int
      value: 2181
    kafka-image:
      value: <- $kafka-image-tag
      type: string  


kafka-1:
  defines: runnable
  inherits: kafka-cluster/kafka-base
  variables:
    broker-internal-host-name: <- connection-hostname("kafka-1")
    broker-id: 1
    broker-port: 9092
    broker-internal-port: 29092
    zookeeper-port: 2181

kafka-2:
  defines: runnable
  inherits: kafka-cluster/kafka-base
  variables:
    broker-internal-host-name: <- connection-hostname("kafka-2")
    broker-id: 2
    broker-port: 9093
    broker-internal-port: 29092
    zookeeper-port: 2181

kafka-3:
  defines: runnable
  inherits: kafka-cluster/kafka-base
  variables:
    broker-internal-host-name: <- connection-hostname("kafka-3")
    broker-id: 3
    broker-port: 9094
    broker-internal-port: 29092
    zookeeper-port: 2181